IMPORT_OVER_LISTFILE
 GET_RUNTIME
, TState
, TProgrammArray
, TCycleArray

END_IMPORT

ALGORITHM_BLOCK Vorgabe #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 ModeSwitchP1 : BOOL;
 ModeSwitchP3 : BOOL;
 FUAI1 : REAL;
 FUX1 : BOOL;
 FUX2 : BOOL;
 KeyRed : BOOL;
 KeyGreen : BOOL;
 SafetySwitch1 : BOOL;
 LedGreen : BOOL;
 LedRed : BOOL;
 svSollDrehzahl : REAL;
 svMaxDrehzahl : REAL;
 svFinishedCycles : DINT;
 svState : TState;
 VisuKeyGreen : BOOL;
 svProgramm : TProgrammArray;
 svCycleRestTime : LINT;
 VisuKeyRed : BOOL;
 svIstDrehzahl : REAL;
 FUAO1 : REAL;
 svProgSelected : INT;
 svFinishedCyclesP : TCycleArray;
END_VAR

SYSTEM_OBJECT
 Task10ms : TASK;
END_OBJECT

VAR
 startCycle : BOOL;
END_VAR

PROCESS_ALGORITHM Automatik ON Task10ms AUTOSTART


VAR
 cycleStartTime : TIME;
 actualTime : TIME;
 durationS : LINT;
 programm : TProgrammArray;
 programmNr : INT;
 gesamtDauer : LINT;
END_VAR
#BEGIN_EDIT_BLOCK

actualTime := GET_RUNTIME();
svSollDrehzahl := 0.0;

IF (startCycle) THEN
   cycleStartTime := actualTime;
   startCycle := FALSE;
   svState:=StateAutomaticRunning;
   programmNr := svProgSelected;   
   programm := svProgramm;
   IF (programm[programmNr,1].Enabled = FALSE) THEN
      programm[programmNr,1].Duration := 0;    
   END_IF; 
   IF (programm[programmNr,2].Enabled = FALSE) THEN
      programm[programmNr,2].Duration := 0;    
   END_IF; 
   IF (programm[programmNr,3].Enabled = FALSE) THEN
      programm[programmNr,3].Duration := 0;    
   END_IF; 
   gesamtDauer := (2*programm[programmNr,1].Duration)+ (2*programm[programmNr,2].Duration) + (2*programm[programmNr,3].Duration);   
END_IF;                         

IF (svState=StateAutomaticRunning) THEN

    durationS :=  (TIME_TO_LINT(actualTime - cycleStartTime))/1000000;
    svCycleRestTime := gesamtDauer - durationS;
 
 IF (durationS >= 0 AND 
     durationS < programm[programmNr,1].Duration) THEN
        svSollDrehzahl := programm[programmNr,1].Drehzahl;
 ELSIF (durationS >= programm[programmNr,1].Duration AND 
     durationS < (2*programm[programmNr,1].Duration)) THEN
        svSollDrehzahl := programm[programmNr,1].Drehzahl*-1.0;
 ELSIF (durationS >= (2*programm[programmNr,1].Duration) AND 
     durationS < (2*programm[programmNr,1].Duration+programm[programmNr,2].Duration)) THEN
        svSollDrehzahl := programm[programmNr,2].Drehzahl*-1.0;
 ELSIF (durationS >= (2*programm[programmNr,1].Duration+programm[programmNr,2].Duration) AND 
     durationS < (2*programm[programmNr,1].Duration+2*programm[programmNr,2].Duration)) THEN
        svSollDrehzahl := programm[programmNr,2].Drehzahl;
 ELSIF (durationS >= (2*programm[programmNr,1].Duration+2*programm[programmNr,2].Duration) AND 
     durationS < (2*programm[programmNr,1].Duration+2*programm[programmNr,2].Duration+programm[programmNr,3].Duration)) THEN
        svSollDrehzahl := programm[programmNr,3].Drehzahl;
 ELSIF (durationS >= (2*programm[programmNr,1].Duration+2*programm[programmNr,2].Duration+programm[programmNr,3].Duration) AND 
     durationS < (2*programm[programmNr,1].Duration+2*programm[programmNr,2].Duration+2*programm[programmNr,3].Duration)) THEN
        svSollDrehzahl := programm[programmNr,3].Drehzahl*-1.0;
 ELSE (* Zyklusende erreicht*)
        svState:=StateAutomaticStopped;
        svFinishedCycles := svFinishedCycles + 1;
        svFinishedCyclesP[programmNr] := svFinishedCyclesP[programmNr] + 1;
     
     
     
 END_IF;

END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM UmrichterOutput ON Task10ms AUTOSTART


VAR
 absDrehzahl : REAL;
END_VAR
#BEGIN_EDIT_BLOCK
 (* Drehrichtung vorgeben*)
FUX1 := FALSE;
FUX2 := FALSE;

IF (svSollDrehzahl > 0.0) THEN
        FUX1 := TRUE;
        FUX2 := FALSE;
ELSIF (svSollDrehzahl < 0.0) THEN
        FUX1 := FALSE;
        FUX2 := TRUE;
END_IF;


(* Drehzahl vorgeben *)
FUAI1 := 0.0;

absDrehzahl := svSollDrehzahl;
IF (absDrehzahl < 0.0) THEN
    absDrehzahl := absDrehzahl * -1.0;  
END_IF;
   
IF (absDrehzahl <= svMaxDrehzahl) THEN
    FUAI1 := (absDrehzahl/svMaxDrehzahl)*10.0;
END_IF;

svIstDrehzahl := (FUAO1/10.0)*svMaxDrehzahl;

svIstDrehzahl := DINT_TO_REAL((REAL_TO_DINT(svIstDrehzahl)/10)*10);


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM LedOutput ON Task10ms AUTOSTART


VAR
 actualTime : TIME;
 rest : LINT;
 blinktime : LINT := 400000;
END_VAR
#BEGIN_EDIT_BLOCK
(* Vorsicht LedRed ist eingeschaltet wenn False *)

(*Rote Led soll blinken wenn Automatik läuft*)
(*Grüne Led soll blinken wenn Automatik läuft*)
IF (svState=StateAutomaticRunning) THEN
    actualTime := GET_RUNTIME();
    rest := MOD(TIME_TO_LINT(actualTime),blinktime); 
    IF (rest > (blinktime/2)) THEN
       LedGreen:=TRUE;
       LedRed:=FALSE;
    ELSE 
       LedGreen:=FALSE;  
       LedRed:=TRUE; 
    END_IF;
END_IF;  


(*Grüne Led soll leuchten wenn Automatik gestartet werden kann*)
IF (svState=StateAutomaticStopped AND SafetySwitch1=TRUE AND KeyRed) THEN
    LedRed:=TRUE;
    LedGreen:=TRUE;
END_IF;  


(*Rote Led soll leuchten wenn Automatik nicht gestartet werden kann*)
IF (SafetySwitch1=FALSE OR KeyRed=FALSE) THEN
    LedGreen:=FALSE;
    LedRed:=FALSE;
END_IF;  






;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM SafetySwitch ON Task10ms AUTOSTART

#BEGIN_EDIT_BLOCK

IF (svState=StateAutomaticRunning AND SafetySwitch1=FALSE) THEN (*Automatik Zyklus abbrechen*)
    svState:=StateAutomaticStopped;  
END_IF; 

(*TODO Erkennung Vollautomatik Neustart Zyklus*)


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM InputAuswertung ON Task10ms AUTOSTART


VAR
 KeyGreenLast : BOOL;
 VisuKeyGreenLast : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK

(*Start Knopf Input erkennen und Starten neuer Zyklus StartKnopf ist Öffner*)
IF (svState=StateAutomaticStopped AND KeyGreen=FALSE AND KeyGreenLast=TRUE) THEN (*Automatik Zyklus starten*)
    startCycle:=TRUE; 
END_IF; 
KeyGreenLast:=KeyGreen; (*für Flankenerkennung*)   

(*Start Knopf Visu erkennen und Starten neuer Zyklus*)
IF (svState=StateAutomaticStopped AND VisuKeyGreen=TRUE AND VisuKeyGreenLast=FALSE) THEN (*Automatik Zyklus starten*)
    startCycle:=TRUE; 
END_IF; 
VisuKeyGreenLast:=VisuKeyGreen; (*für Flankenerkennung*)   


(*Stop Taster Input erkennen und Stop*)
IF (svState=StateAutomaticRunning AND KeyRed=FALSE) THEN (*Automatik Zyklus abbrechen*)
    svState:=StateAutomaticStopped; 
END_IF; 

(*Stop Taster Visu erkennen und Stop*)
 IF (svState=StateAutomaticRunning AND VisuKeyRed) THEN (*Automatik Zyklus abbrechen*)
    svState:=StateAutomaticStopped; 
END_IF;

IF (ModeSwitchP1) THEN svProgSelected := 1;
ELSIF (ModeSwitchP3) THEN svProgSelected := 3;
ELSE  svProgSelected := 2;
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 164 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(11)GET_RUNTIME @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(7)Vorgabe @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
24 
@Var @RT(8)Task10ms @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)ModeSwitchP1 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)ModeSwitchP3 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(5)FUAI1 @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(4)FUX1 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(4)FUX2 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(6)KeyRed @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(8)KeyGreen @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)SafetySwitch1 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(8)LedGreen @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(6)LedRed @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)svSollDrehzahl @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)svMaxDrehzahl @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)startCycle @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)svFinishedCycles @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)svState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)TState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)VisuKeyGreen @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)svProgramm @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)TProgrammArray @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)svCycleRestTime @RT(0) @T @F @DT @RT(4)LINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)VisuKeyRed @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)svIstDrehzahl @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(5)FUAO1 @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)svProgSelected @RT(0) @T @F @DT @RT(3)INT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)svFinishedCyclesP @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)TCycleArray @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

5 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(9)Automatik @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)Task10ms @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
6 
@Var @RT(14)cycleStartTime @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)actualTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)durationS @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)LINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)programm @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)TProgrammArray @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)programmNr @RT(0) @T @F @DT @RT(3)INT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)gesamtDauer @RT(0) @T @F @DT @RT(4)LINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(15)UmrichterOutput @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)Task10ms @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(11)absDrehzahl @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(9)LedOutput @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)Task10ms @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(10)actualTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)rest @RT(0) @T @F @DT @RT(4)LINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)blinktime @RT(0) @T @F @DT @RT(4)LINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(6)400000 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(12)SafetySwitch @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)Task10ms @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(15)InputAuswertung @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)Task10ms @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(12)KeyGreenLast @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)VisuKeyGreenLast @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(56)

actualTime := GET_RUNTIME();
svSollDrehzahl := 0.0;

IF (startCycle) THEN
   cycleStartTime := actualTime;
   startCycle := FALSE;
   svState:=StateAutomaticRunning;
   programmNr := svProgSelected;   
   programm := svProgramm;
   IF (programm[programmNr,1].Enabled = FALSE) THEN
      programm[programmNr,1].Duration := 0;    
   END_IF; 
   IF (programm[programmNr,2].Enabled = FALSE) THEN
      programm[programmNr,2].Duration := 0;    
   END_IF; 
   IF (programm[programmNr,3].Enabled = FALSE) THEN
      programm[programmNr,3].Duration := 0;    
   END_IF; 
   gesamtDauer := (2*programm[programmNr,1].Duration)+ (2*programm[programmNr,2].Duration) + (2*programm[programmNr,3].Duration);   
END_IF;                         

IF (svState=StateAutomaticRunning) THEN

    durationS :=  (TIME_TO_LINT(actualTime - cycleStartTime))/1000000;
    svCycleRestTime := gesamtDauer - durationS;
 
 IF (durationS >= 0 AND 
     durationS < programm[programmNr,1].Duration) THEN
        svSollDrehzahl := programm[programmNr,1].Drehzahl;
 ELSIF (durationS >= programm[programmNr,1].Duration AND 
     durationS < (2*programm[programmNr,1].Duration)) THEN
        svSollDrehzahl := programm[programmNr,1].Drehzahl*-1.0;
 ELSIF (durationS >= (2*programm[programmNr,1].Duration) AND 
     durationS < (2*programm[programmNr,1].Duration+programm[programmNr,2].Duration)) THEN
        svSollDrehzahl := programm[programmNr,2].Drehzahl*-1.0;
 ELSIF (durationS >= (2*programm[programmNr,1].Duration+programm[programmNr,2].Duration) AND 
     durationS < (2*programm[programmNr,1].Duration+2*programm[programmNr,2].Duration)) THEN
        svSollDrehzahl := programm[programmNr,2].Drehzahl;
 ELSIF (durationS >= (2*programm[programmNr,1].Duration+2*programm[programmNr,2].Duration) AND 
     durationS < (2*programm[programmNr,1].Duration+2*programm[programmNr,2].Duration+programm[programmNr,3].Duration)) THEN
        svSollDrehzahl := programm[programmNr,3].Drehzahl;
 ELSIF (durationS >= (2*programm[programmNr,1].Duration+2*programm[programmNr,2].Duration+programm[programmNr,3].Duration) AND 
     durationS < (2*programm[programmNr,1].Duration+2*programm[programmNr,2].Duration+2*programm[programmNr,3].Duration)) THEN
        svSollDrehzahl := programm[programmNr,3].Drehzahl*-1.0;
 ELSE (* Zyklusende erreicht*)
        svState:=StateAutomaticStopped;
        svFinishedCycles := svFinishedCycles + 1;
        svFinishedCyclesP[programmNr] := svFinishedCyclesP[programmNr] + 1;
     
     
     
 END_IF;

END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(29)
 (* Drehrichtung vorgeben*)
FUX1 := FALSE;
FUX2 := FALSE;

IF (svSollDrehzahl > 0.0) THEN
        FUX1 := TRUE;
        FUX2 := FALSE;
ELSIF (svSollDrehzahl < 0.0) THEN
        FUX1 := FALSE;
        FUX2 := TRUE;
END_IF;


(* Drehzahl vorgeben *)
FUAI1 := 0.0;

absDrehzahl := svSollDrehzahl;
IF (absDrehzahl < 0.0) THEN
    absDrehzahl := absDrehzahl * -1.0;  
END_IF;
   
IF (absDrehzahl <= svMaxDrehzahl) THEN
    FUAI1 := (absDrehzahl/svMaxDrehzahl)*10.0;
END_IF;

svIstDrehzahl := (FUAO1/10.0)*svMaxDrehzahl;

svIstDrehzahl := DINT_TO_REAL((REAL_TO_DINT(svIstDrehzahl)/10)*10);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(34)
(* Vorsicht LedRed ist eingeschaltet wenn False *)

(*Rote Led soll blinken wenn Automatik läuft*)
(*Grüne Led soll blinken wenn Automatik läuft*)
IF (svState=StateAutomaticRunning) THEN
    actualTime := GET_RUNTIME();
    rest := MOD(TIME_TO_LINT(actualTime),blinktime); 
    IF (rest > (blinktime/2)) THEN
       LedGreen:=TRUE;
       LedRed:=FALSE;
    ELSE 
       LedGreen:=FALSE;  
       LedRed:=TRUE; 
    END_IF;
END_IF;  


(*Grüne Led soll leuchten wenn Automatik gestartet werden kann*)
IF (svState=StateAutomaticStopped AND SafetySwitch1=TRUE AND KeyRed) THEN
    LedRed:=TRUE;
    LedGreen:=TRUE;
END_IF;  


(*Rote Led soll leuchten wenn Automatik nicht gestartet werden kann*)
IF (SafetySwitch1=FALSE OR KeyRed=FALSE) THEN
    LedGreen:=FALSE;
    LedRed:=FALSE;
END_IF;  





@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(7)

IF (svState=StateAutomaticRunning AND SafetySwitch1=FALSE) THEN (*Automatik Zyklus abbrechen*)
    svState:=StateAutomaticStopped;  
END_IF; 

(*TODO Erkennung Vollautomatik Neustart Zyklus*)

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(30)

(*Start Knopf Input erkennen und Starten neuer Zyklus StartKnopf ist Öffner*)
IF (svState=StateAutomaticStopped AND KeyGreen=FALSE AND KeyGreenLast=TRUE) THEN (*Automatik Zyklus starten*)
    startCycle:=TRUE; 
END_IF; 
KeyGreenLast:=KeyGreen; (*für Flankenerkennung*)   

(*Start Knopf Visu erkennen und Starten neuer Zyklus*)
IF (svState=StateAutomaticStopped AND VisuKeyGreen=TRUE AND VisuKeyGreenLast=FALSE) THEN (*Automatik Zyklus starten*)
    startCycle:=TRUE; 
END_IF; 
VisuKeyGreenLast:=VisuKeyGreen; (*für Flankenerkennung*)   


(*Stop Taster Input erkennen und Stop*)
IF (svState=StateAutomaticRunning AND KeyRed=FALSE) THEN (*Automatik Zyklus abbrechen*)
    svState:=StateAutomaticStopped; 
END_IF; 

(*Stop Taster Visu erkennen und Stop*)
 IF (svState=StateAutomaticRunning AND VisuKeyRed) THEN (*Automatik Zyklus abbrechen*)
    svState:=StateAutomaticStopped; 
END_IF;

IF (ModeSwitchP1) THEN svProgSelected := 1;
ELSIF (ModeSwitchP3) THEN svProgSelected := 3;
ELSE  svProgSelected := 2;
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
